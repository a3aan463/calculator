name: Preintergation Checks on Feature Branch

on:
  push:
    branches-ignore:
      - 'master'
jobs: 

  run_unit_tests:
    runs-on: ubuntu-latest  
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven  

      - name: Run unit tests
        run: mvn test -Dtest=CalculatorControllerCalculationTests

  run_coverage:
    runs-on: ubuntu-latest
    #needs: run_unit_tests
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
         
      - name: Run tests and calculate code coverage
        run: mvn test jacoco:report
      - name: Archive code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: target/site/jacoco
          retention-days: 7

  scan_dependency:
    runs-on: ubuntu-latest
    #needs: run_coverage
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven

      - name: Cache OWASP Dependency Check Data
        uses: actions/cache@v2
        with:
          path: |
            ~/.m2
            ~/.dependency-check
          key: ${{ runner.os }}-owasp-data-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-owasp-data-

      - name: Owasp Dependency Check
        run: mvn dependency-check:check

      - name: Upload Dependency Check Report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: |
            target/dependency-check-report.html
            target/dependency-check-report.xml

  build:
    runs-on: ubuntu-latest
    needs: [scan_dependency,run_unit_tests,run_coverage]
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      - name: Check Git status
        run: git status
      - name: Build with Maven
        run: mvn clean install "-DskipTests" "-Djacoco.skip=true" "-Ddependency-check.skip=true"
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: java-app
          path: '${{ github.workspace }}/target/*.jar'

  # deploy_feature:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   environment:
  #     name: "Production"

  #   steps:
  #     - name: Download artifact from build job
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: java-app
  #         path: target

  #     - name: Display downloaded files
  #       run: ls -R target

  #     - name: Check if jar file exists
  #       run: test -f target/*.jar && echo "Jar file exists" || echo "Jar file does not exist"

  #     - name: Deploy to Azure Web App
  #       id: deploy-to-webapp
  #       uses: azure/webapps-deploy@v2
  #       with:
  #         app-name: 'AdjesRekenmachine'
  #         # slot-name: 'Production'
  #         publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
  #         package: target/*.jar

  deploy_backend:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    
    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v3
      with:
        name: java-app
        path: target

    - name: Deploy to Azure Web App
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        
        app-name: 'AdjesRekenmachine'
        # slot-name: 'Production'
        publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE }}
        package: target/*.jar

    - name: Display downloaded files
      run: ls -R
      
  deploy_front_end:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - name: Run Unit Tests
        run: echo "Running unit tests..." 

  postman_tests:
    runs-on: ubuntu-latest
    needs: deploy_backend
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 20

      - name: Install newman
        run: npm install -g newman

      - name: Install newman-reporter-html
        run: npm install -g newman-reporter-html

      - name: Run Postman tests
        run: newman run ${{ github.workspace }}/src/test/Postman_Tests/Calculate.postman_collection.json -r html --reporter-html-export report.html

      - name: Upload test report
        uses: actions/upload-artifact@v3
        with:
          name: postman-report
          path: report.html

  run-selenium-tests:
    runs-on: windows-latest
    needs: [deploy_backend,deploy_front_end]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
            path: ~\.m2
            key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
            restore-keys: ${{ runner.os }}-m2

      - name: Install Firefox
        run: |
          choco install firefox

      - name: Run Selenium tests
        run:  mvn test -Dtest=SeleniumTest  
